---
import { getCollection } from 'astro:content';
import ProjectLayout from '../../components/ProjectLayout.astro';
import NativeCanvas from '../../components/NativeCanvas.astro';

export async function getStaticPaths() {
  const projects = await getCollection('projects');
  return projects.map(project => ({
    params: { slug: project.slug },
    props: { project },
  }));
}

const { project } = Astro.props;
const { Content } = await project.render();
const allProjects = await getCollection('projects');

// Pass controls data to be available in the component
const controls = project.data.controls || [];

// Handle both old single-framework and new multi-framework projects
const frameworks = project.data.frameworks || (project.data.framework ? [{
  name: project.data.framework,
  displayName: project.data.framework === 'macroquad' ? 'Rust + Canvas2D' : 'C++ + Raylib',
  sourceCode: ''
}] : []);

// Read source code for frameworks that don't have it embedded
if (frameworks.length > 0) {
  const fs = await import('fs');
  const path = await import('path');
  
  for (const framework of frameworks) {
    if (!framework.sourceCode) {
      try {
        let filePath = '';
        if (framework.name === 'macroquad') {
          filePath = path.join(process.cwd(), 'src/native/macroquad', project.data.projectName, 'src/lib.rs');
        } else if (framework.name === 'raylib') {
          filePath = path.join(process.cwd(), 'src/native/raylib', project.data.projectName, 'main.cpp');
        } else if (framework.name === 'threejs') {
          filePath = path.join(process.cwd(), 'src/native/macroquad', project.data.projectName, 'threejs/src/main.ts');
        }
        
        if (filePath) {
          framework.sourceCode = fs.readFileSync(filePath, 'utf-8');
        }
      } catch (error) {
        console.warn(`Could not read source code for ${framework.name}:`, error instanceof Error ? error.message : 'Unknown error');
      }
    }
  }
}
---

<ProjectLayout project={project} allProjects={allProjects}>
  <article>
    <header>
      <h1>{project.data.title}</h1>
      <p class="description">{project.data.description}</p>
      <div class="meta">
        <span class="difficulty">{project.data.difficulty}</span>
        {frameworks.length > 1 ? (
          <span class="framework">Multi-framework</span>
        ) : frameworks.length === 1 ? (
          <span class="framework">{frameworks[0]?.displayName}</span>
        ) : (
          <span class="framework">{project.data.framework || 'Unknown'}</span>
        )}
        <time datetime={project.data.date.toISOString()}>
          {project.data.date.toLocaleDateString()}
        </time>
      </div>
      <div class="tags">
        {project.data.tags.map(tag => (
          <span class="tag">{tag}</span>
        ))}
      </div>
    </header>
    
    <Content />
    
    <!-- Insert NativeCanvas component for projects with frameworks -->
    {frameworks.length > 0 && (
      <div style="margin: 2rem 0;">
        <NativeCanvas 
          project={project.data.projectName}
          frameworks={frameworks}
          width={800}
          height={600}
          controls={controls}
        />
      </div>
    )}
  </article>
</ProjectLayout>

<style>
  article {
    max-width: 100%;
    line-height: 1.5;
    font-family: "FiraCode", sans-serif;
  }
  
  header {
    margin-bottom: var(--space-l);
    padding-bottom: var(--space-m);
    border-bottom: 1px solid var(--gray);
  }
  
  h1 {
    margin: 0 0 var(--space-xs) 0;
    color: var(--accent);
    font-size: var(--step-2);
    font-weight: 700;
    line-height: 1.1;
  }
  
  .description {
    font-size: var(--step-0);
    color: var(--gray);
    margin: 0 0 var(--space-s) 0;
    font-family: "Open Sans", sans-serif;
    line-height: 1.5;
  }
  
  .meta {
    display: flex;
    gap: var(--space-s);
    margin-bottom: var(--space-s);
    font-size: var(--step--1);
    align-items: center;
  }
  
  .difficulty,
  .framework {
    padding: var(--space-3xs) var(--space-2xs);
    border: 1px solid var(--gray);
    font-weight: 400;
    background: transparent;
  }
  
  .difficulty {
    color: var(--gray);
  }
  
  .framework {
    color: var(--accent);
  }
  
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-2xs);
  }
  
  .tag {
    padding: var(--space-3xs) var(--space-2xs);
    border: 1px solid var(--gray);
    color: var(--gray);
    font-size: var(--step--2);
    font-weight: 400;
    background: transparent;
  }
  
  /* Content styling */
  article :global(h2) {
    font-size: var(--step-1);
    font-weight: 700;
    color: var(--accent);
    margin: var(--space-l) 0 var(--space-s) 0;
    line-height: 1.2;
    font-family: "FiraCode", sans-serif;
  }
  
  article :global(h3) {
    font-size: var(--step-0);
    font-weight: 700;
    color: var(--accent);
    margin: var(--space-m) 0 var(--space-xs) 0;
    line-height: 1.2;
    font-family: "FiraCode", sans-serif;
  }
  
  article :global(p) {
    margin: 0 0 var(--space-s) 0;
    font-size: var(--step-0);
    line-height: 1.5;
    color: var(--gray);
    font-family: "Open Sans", sans-serif;
  }
  
  article :global(ul),
  article :global(ol) {
    margin: 0 0 var(--space-s) var(--space-m);
    color: var(--gray);
    font-family: "Open Sans", sans-serif;
  }
  
  article :global(li) {
    margin-bottom: var(--space-2xs);
  }
  
  article :global(strong) {
    color: var(--accent);
    font-weight: 700;
  }
  
  article :global(code) {
    font-family: "FiraCode", sans-serif;
    font-size: var(--step--1);
    color: var(--accent);
    background: transparent;
    padding: 0;
  }
  
  article :global(a) {
    color: var(--accent);
    text-decoration: none;
  }
  
  article :global(a:hover) {
    color: var(--dark-gray);
  }
</style>